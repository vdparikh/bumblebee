version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    container_name: compliance_postgres
    environment:
      POSTGRES_DB: compliance_db
      POSTGRES_USER: compliance_user
      POSTGRES_PASSWORD: compliance_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db.sql:/docker-entrypoint-initdb.d/01-schema.sql # Renamed for ordering
      - ./sample_data.sql:/docker-entrypoint-initdb.d/02-sample-data.sql # Added sample data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U compliance_user -d compliance_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: ./backend # Context is the backend directory
      dockerfile: Dockerfile # Use the generic Go Dockerfile
      args:
        MAIN_PACKAGE_PATH: ./cmd/app # Specify the main package for the app
    container_name: compliance_app
    ports:
      - "8080:8080" # Exposes port 8080 from the container to the host
    environment:
      GIN_MODE: release # Or 'debug' for development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: compliance_user
      DB_PASSWORD: compliance_password
      DB_NAME: compliance_db
      DB_SSLMODE: disable # Common for local Docker setups
      DATABASE_URL: postgresql://compliance_user:compliance_password@postgres:5432/compliance_db?sslmode=disable
      JWT_SECRET: "your_very_secret_jwt_key_here" # CHANGE THIS!
      FRONTEND_DIR: /app/ui_build # Path inside the container where UI files will be
      PORT: 8080 # Port the Go app will listen on inside the container
    volumes:
      - ./frontend/build:/app/ui_build # Mount the built UI from host to container
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres to be healthy
    restart: unless-stopped

  integrations:
    build:
      context: ./backend # Context is the backend directory
      dockerfile: Dockerfile # Use the generic Go Dockerfile
      args:
        MAIN_PACKAGE_PATH: ./cmd/integrations # Specify the main package for integrations
    container_name: compliance_integrations
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: compliance_user
      DB_PASSWORD: compliance_password
      DB_NAME: compliance_db
      DB_SSLMODE: disable
      DATABASE_URL: postgresql://compliance_user:compliance_password@postgres:5432/compliance_db?sslmode=disable
      # Add other environment variables specific to the integrations service
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres to be healthy
    restart: unless-stopped

volumes:
  postgres_data: # Defines the named volume for PostgreSQL data persistence
