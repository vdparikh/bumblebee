version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: compliance_postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: compliance
      POSTGRES_PASSWORD: compliance
      POSTGRES_DB: compliance
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: compliance_backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgres://compliance:compliance@postgres:5432/compliance?sslmode=disable
    depends_on:
      - postgres
    volumes:
      - ./backend/uploads:/app/uploads # Persist uploads, ensure /app/uploads is where backend saves them
      # If your backend executable is in /root/ as per Dockerfile, and uploads are relative to executable:
      # - ./backend/uploads:/root/uploads

  integrations:
    build:
      context: ./backend
      dockerfile: cmd/integrations/Dockerfile
    environment:
      DATABASE_URL: postgres://compliance:compliance@postgres:5432/compliance?sslmode=disable
    depends_on:
      - postgres

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: compliance_frontend
    restart: unless-stopped
    ports:
      - "3000:3000" # Nginx in the frontend Dockerfile is set to expose 3000
    depends_on:
      - backend # Optional, but good for startup order visibility

volumes:
  postgres_data: # Persists PostgreSQL data

# Note: For the backend volume for uploads, ensure the path inside the container
# matches where your Go application expects to read/write files.
# If your Go app uses "./uploads", and WORKDIR is /app, then /app/uploads is correct.
# If WORKDIR is /root/, then /root/uploads.